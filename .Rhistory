devtools::load_all(".")
vignette <- readRDS("~/R/appsilon/CBD/STRINGdb/build/vignette.rds")
library(devtools)
devtools::load_all("C://Users/Jakub/Documents/R/appsilon/CBD/rstring.R")
devtools::load_all("C://Users/Jakub/Documents/R/appsilon/CBD/STRINGdb/R/rstring.R")
string_db <- STRINGdb$new( version="11", species=9606, score_threshold=200, input_directory="")
string_db
detach(package:STRINGdb)
string_db <- STRINGdb$new( version="11", species=9606, score_threshold=200, input_directory="")
string_db
string_db <- STRINGdb$new( version="11", species=9606, score_threshold=200, input_directory="")
devtools::load_all("C://Users/Jakub/Documents/R/appsilon/CBD/STRINGdb/R/rstring.R")
string_db <- STRINGdb$new( version="11", species=9606, score_threshold=200, input_directory="")
string_db
temp = downloadAbsentFile(paste("https://stringdb-static.org/download/protein.aliases.v", version, "/", species, ".protein.aliases.v", version, ".txt.gz", sep=""), oD=input_directory)
initialize = function(...) {
'
Description:
Initiliazes STRING with a given version and species.
Checks the current version against the API and sets the "take_first" parameter.
Author(s):
Andrea Franceschini
'
## TODO: allow different versions (v11 will be the lowest one available)
callSuper(...)
if(length(species)==0) {
cat("WARNING: You didn't specify a species. Hence we will set 9606 (Homo Sapiens) as your species.\n")
species <<- 9606
}
if(length(score_threshold)==0) {
cat("WARNING: Score threshold is not specified. We will be using medium stringency cut-off of 400.\n")
score_threshold <<- 400
}
server_version = read.table(url("https://string-db.org/api/tsv-no-header/version"), colClasses = "character")$V1
# stable_url = read.table(url("https://string-db.org/api/tsv-no-header/version"), colClasses = "character")$V2
valid_versions = server_version ## for now we can only use the current version
if(length(version)==0) {
cat("WARNING: You didn't specify a version of the STRING database to use. Hence we will use STRING", server_version,"\n")
version <<- server_version
} else {
version_dotted = paste(version, ".0", sep="")
if(! (version %in% valid_versions || version_dotted %in% valid_versions)) {
cat("ERROR: Currently STRINGdb only supports the most recent version of STRING: ", server_version)
stop()
}
}
if (version_dotted %in% valid_versions) version <<- version_dotted
version_hyphenated = gsub("\\.", "-", version)
stable_url <<- paste("https://version-", version_hyphenated, ".string-db.org", sep="")
if(input_directory=="" || is.null(input_directory) || length(input_directory)==0) input_directory<<-tempdir()
if(input_directory=="" || is.null(input_directory) || length(score_threshold)==0 || score_threshold<1) score_threshold <<- 1
aliases_type <<- "take_first"
},
callSuper(...)
if(length(species)==0) {
cat("WARNING: You didn't specify a species. Hence we will set 9606 (Homo Sapiens) as your species.\n")
species <<- 9606
}
detach(package:STRINGdb)
devtools::load_all("C://Users/Jakub/Documents/R/appsilon/CBD/STRINGdb/R/rstring.R")
string_db <- STRINGdb$new( version="11", species=9606, score_threshold=200, input_directory="")
string_db
example1_mapped <- string_db$map(allTargets, "targets", removeUnmappedRows = TRUE)
library(feather)
example1_mapped <- string_db$map(allTargets, "targets", removeUnmappedRows = TRUE)
#Download protein names for string IDs
terms<-string_db$get_aliases()
#Download protein names for string IDs
terms<-string_db$get_aliases()
library(STRINGdb)
#Download protein names for string IDs
terms<-string_db$get_aliases()
detach(package:STRINGdb)
devtools::load_all("C://Users/Jakub/Documents/R/appsilon/CBD/STRINGdb/R/rstring.R")
#Download protein names for string IDs
terms<-string_db$get_aliases()
detach(package:STRINGdb)
devtools::load_all("C://Users/Jakub/Documents/R/appsilon/CBD/STRINGdb/R/rstring.R")
example1_mapped <- string_db$map(allTargets, "targets", removeUnmappedRows = TRUE)
#Download protein names for string IDs
terms<-string_db$get_aliases()
library(STRINGdb)
example1_mapped <- string_db$map(allTargets, "targets", removeUnmappedRows = TRUE)
example1_mapped <- string_db$map(allTargets, "targets", removeUnmappedRows = TRUE)
library(STRINGdb)
#Download protein names for string IDs
terms<-string_db$get_aliases()
install.packages("STRINGdb")
install.packages("STRINGdb")
install.packages("STRINGdb")
install.packages("STRINGdb")
library(STRINGdb)
#Download protein names for string IDs
terms<-string_db$get_aliases()
#Download protein names for string IDs
terms<-string_db$get_aliases()
load_all("C://Users/Jakub/Documents/R/appsilon/CBD/STRINGdb/R/rstring.R")
library(devtools)
load_all("C://Users/Jakub/Documents/R/appsilon/CBD/STRINGdb/R/rstring.R")
library(dplyr)
library(feather)
#Download string DB
string_db <- STRINGdb$new( version="11", species=9606, score_threshold=200, input_directory="")
#Read tables
allTargets <- read.table("C:/Users/Jakub/Desktop/KUBA/PROJEKTY/networks/OA/OA_NP_CBD_all_targets.csv", header=T)
myTargets<- read.table("C:/Users/Jakub/Desktop/KUBA/PROJEKTY/networks/OA/OA_NP_CBD.csv", header=T)
#Add String ID to tables
example1_mapped <- string_db$map(allTargets, "targets", removeUnmappedRows = TRUE)
myTargets_mapped <- string_db$map(myTargets, "targets", removeUnmappedRows = TRUE)
#Export string IDs
hits <- example1_mapped$STRING_id
myHits <- myTargets_mapped$STRING_id
#get all interactions
interactions<-string_db$get_interactions(hits)
#get interactions of interest
myInteractions=c()
for (i in myHits){
tempTable <- interactions[interactions$from == i, ]
myInteractions <- rbind(myInteractions, tempTable)
}
#Find the node with maximum number of edges
tempTable <- table(myInteractions$from)
tempTable<-as.data.frame(table(myInteractions$from), stringsAsFactors = FALSE)
attach(tempTable)
newdata <- tempTable[order(-Freq),]
newdata
profvis({x=1
for(i in newdata$Var1){
terms<-string_db$get_aliases()
index<-which(terms$STRING_id==i)
index<-index[1]
newdata$Var1[x]=terms$alias[index]
x=x+1
}
newdata
})
library(profvis)
profvis({x=1
for(i in newdata$Var1){
terms<-string_db$get_aliases()
index<-which(terms$STRING_id==i)
index<-index[1]
newdata$Var1[x]=terms$alias[index]
x=x+1
}
newdata
})
newdata
aliasDf
aliasDf <- terms<-as.data.frame(read_feather("C://Users/Jakub/Documents/R/appsilon/CBD/alias.feather"))
aliasDf
rm(list= ls())
ls()
